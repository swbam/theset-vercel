RULES: never go against my outline and always follow these rules!

# User Flow Through TheSet App

When a user opens TheSet, they search for artists using the search bar which queries the Ticketmaster API directly. This ensures that users only see artists who have upcoming shows available on Ticketmaster. As they type, the app makes real-time API calls to Ticketmaster to populate the autocomplete dropdown with matching artists who have scheduled concerts. Upon selecting an artist, the user is directed to that artist's profile page, which displays basic artist information and immediately loads all upcoming concerts pulled from Ticketmaster, presented as cards showing event dates, venue names, and locations. When a user clicks on any concert card, they're taken to the show's dedicated page featuring complete venue details, date and time information, and a direct ticket purchase link. The centerpiece of this page is the interactive setlist—populated with the artist's top tracks from Spotify—displayed as a table with current vote counts alongside each song, sorted with the highest-voted songs at the top.

The voting process remains intuitive—users logged in via Spotify OAuth can click the upvote button next to songs they want to hear. The system provides immediate feedback by highlighting the voted song and incrementing the counter through optimistic UI updates, while simultaneously sending the vote to the server and broadcasting the change to all users viewing the same setlist through WebSockets. If a user attempts to vote for the same song twice, the system prevents this, maintaining the upvoted button state and displaying a notification that they've already voted for this track. As songs receive more votes, they dynamically reorder in the setlist, creating an engaging real-time experience as the community collectively shapes the ideal concert setlist.

# Data Import & Synchronization Points

## Artist Data (Ticketmaster API)
* **Initial Import:** When a user searches for an artist and that artist doesn't exist in the database
* **Triggered By:** User searching for artists with upcoming shows
* **Data Imported:** Artist name, ID, and basic information from Ticketmaster
* **Refresh Timing:** Artist data is refreshed if the last update was more than 7 days ago
* **Background Sync:** None - artist data is only updated when explicitly searched

## Track Lists (Spotify API)
* **Initial Import:** When a show page is first accessed and no setlist exists
* **Triggered By:** First user visit to a show page
* **Data Imported:** Artist's song catalog (track name, ID, Spotify URL)
* **Data Initialization:**  If a show is accessed but has no setlist, the system automatically creates one with 5 random tracks pulled from the artist's song catalog
* **Refresh Timing:** Track lists are not refreshed after initial creation - voting makes the setlist community-driven

## Show/Concert Data (Ticketmaster API)
* **Initial Import:** When a user visits an artist's page or when the artist is first added to the system
* **Triggered By:** Visiting an artist profile page or initial artist import
* **Data Imported:** Show name, date, image, ticket URL, venue information
* **Refresh Timing:** Show data is refreshed if the last update was more than 24 hours ago
* **Background Sync:** Optional daily job to update shows for frequently accessed artists

## Venue Data (Ticketmaster API)
* **Initial Import:** When concert/show data is imported and includes venue information
* **Triggered By:** Show data import process
* **Data Imported:** Venue name, location (city, state, country), address
* **Refresh Timing:** Updated whenever new shows are imported with that venue
* **Background Sync:** None - venue data comes packaged with show information





## Core Application Rules

* **Focus on the core functionality** - This is a concert setlist voting app, not a music player or social network
* **Always implement real-time vote updates** - Use WebSockets or equivalent technology to ensure all users see vote changes immediately
* **Maintain vote integrity** - Enforce one vote per user per song through database constraints and UI feedback
* **Auto-populate setlists** - When a new show is created, automatically fetch and populate the artist's top 10 tracks from Spotify with zero votes

## Technical Implementation

* **Use Next.js with App Router** for all routing and page structure
* **Implement TypeScript throughout** the entire codebase - no plain JavaScript files
* **Use Tailwind CSS for styling** with ShadCN UI components for consistent design
* **Implement Neon PostgreSQL with Drizzle ORM** for type-safe database operations
* **Configure Next Auth with Spotify OAuth** for authentication - don't build custom auth
* **Use either Neon Realtime or Pusher** for WebSocket functionality - not Socket.io or custom solutions

## API Integration

* **Use the Spotify API for**:
  * Artist search and discovery
  * Artist details (name, image, genres, etc.)
  * Top tracks for setlist population
* **Use the Ticketmaster API for**:
  * Concert/show data
  * Venue information
  * Ticket purchase links
* **Store API keys securely** in environment variables, never hardcode them
* **Implement proper error handling** for all API calls with user-friendly fallbacks

## Database Requirements

* **Maintain proper relationships** between all entities (artists, shows, venues, setlists, votes)
* **Use UUID primary keys** throughout the application
* **Create unique constraints** where needed (e.g., one vote per user per song)
* **Implement efficient indexes** for common query patterns
* **Update timestamp fields** automatically for all data changes

## UI/UX Guidelines

* **Follow responsive design principles** - app must work on mobile, tablet, and desktop
* **Make voting buttons touch-friendly** - minimum 44px touch targets
* **Implement loading states** for all asynchronous operations
* **Use optimistic UI updates** for voting to provide immediate feedback
* **Display toast notifications** for success/error states
* **Maintain consistent spacing** using Tailwind's spacing system

## Performance Optimization

* **Optimize image loading** with Next.js Image component and proper sizing
* **Implement data fetching with SWR or React Query** for client-side caching
* **Use code splitting** for large component trees
* **Lazy load non-critical components** to improve initial load time
* **Minimize database queries** by fetching related data efficiently

## Development Process

* **Create reusable components** for common UI elements
* **Implement proper state management** using React Context or similar where needed
* **Write clean, self-documenting code** with clear function and variable names
* **Test on multiple devices and browsers** before finalizing
* **Commit code frequently** with descriptive commit messages

## Do Not Implement

* **No music playback functionality** - this is not a streaming app
* **No following/favoriting features** - focus only on voting functionality
* **No social sharing features** unless specifically requested
* **No complex user profiles** beyond basic Spotify login information
* **No commenting system** on setlists or shows

## Feature Implementation Checklist

* ✅ Artist search and discovery
* ✅ Artist profiles with upcoming shows
* ✅ Show pages with dynamic setlists
* ✅ Real-time voting system
* ✅ Spotify OAuth integration
* ✅ Ticketmaster event data
* ✅ Mobile-responsive UI
* ✅ Optimistic UI updates for votes
* ✅ Vote validation and restrictions

#-----------------------------------------------------------------------------------------------
# Spotify API Credentials
#-----------------------------------------------------------------------------------------------
SPOTIFY_CLIENT_ID=2946864dc822469b9c672292ead45f43
SPOTIFY_CLIENT_SECRET=feaf0fc901124b839b11e02f97d18a8d

#-----------------------------------------------------------------------------------------------
# Ticketmaster API
#-----------------------------------------------------------------------------------------------
TICKETMASTER_API_KEY=k8GrSAkbFaN0w7qDxGl7ohr8LwdAQm9b